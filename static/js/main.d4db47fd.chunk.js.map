{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","handleEvent","e","setState","searchField","target","value","state","fetch","then","response","json","resp","this","filterMonster","filter","toString","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAIaA,EAAO,SAACC,GAAD,OACpB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJTC,EAAW,SAAAR,GAAK,OAG3B,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLhBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+BCG,G,wDAlCb,aAAe,IAAD,8BACZ,gBAaFC,YAAc,SAACC,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,qDAQd,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAOzC,WACE,MAAiCC,KAAKN,MAA9Bd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YACbU,EAAgBrB,EAASsB,QAAO,SAAA5B,GAAO,OAAIA,EAAQG,KAAK0B,WAAWC,cAAcC,SAASd,EAAYY,WAAWC,kBACtH,OACE,sBAAKhC,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKZ,cAC5D,cAAC,EAAD,CAAUR,SAAUqB,W,GA3BVK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d4db47fd.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = (props) => (\n<div className='card-container'>\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\n    <h1>{props.monster.name}</h1>\n    <p>{props.monster.email}</p>\n</div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n\n\n  <div className='card-list'>\n        {\n          props.monsters.map(monster => (\n          <Card key={monster.id} monster={monster} />))\n        }\n        </div>\n);","import React from 'react';\n\nimport './search-box.styles.css';\n\n//functional component\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\n    <input \n    className='search'\n    type='search' \n    placeholder={placeholder} \n    onChange={handleChange}\n      \n    />\n);\n\n","import React, {Component} from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters :[],\n      searchField: '',\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(resp => this.setState({monsters: resp}))\n  }\n\n  handleEvent = (e) => {\n    this.setState({searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField} = this.state;\n   const filterMonster = monsters.filter(monster => monster.name.toString().toLowerCase().includes(searchField.toString().toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Moster Robolex</h1>\n        <SearchBox placeholder=\"search monseter\" handleChange={this.handleEvent} />\n        <CardList monsters={filterMonster}>\n        </CardList>\n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}